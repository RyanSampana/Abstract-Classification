{
    "collab_server" : "",
    "contents" : "## This file can be sourced to obtain the results reported in the accompanying\n## paper. This file is a walkthrough introduction of the code. See the\n## README for instructions.\n\n## Read, clean, and format the training data. (The data has been provided\n## with the package.)\ntrain_in <- cleanInData(\"train_in.csv\")\ntrain_out <- cleanOutData(\"train_out.csv\")\n\n## Perform cross validation (for time, on a small subset of the data)\n## to test different values of alpha and diffuse\nalphaVec <- c(0,0.001,0.1,0.5,0.7,1)\ndiffuseVec <- c(0,0.5,1)\nla <- length(alphaVec)\nld <- length(diffuseVec)\ncross_valid <- matrix(rep(list(),la*ld),nrow=la,ncol=ld)\n\n## We're planning to make a plot of the accuracies for these values later,\n## so let's store the accuracies in a matrix as we get them.\naccMat <- matrix(0,nrow=la,ncol=ld)\n\nk <- 1\nfor(i in 1:la){\n  for(j in 1:ld){\n    cat(\"alpha = \",alphaVec[i],\"  diffuse = \",diffuseVec[j],\"\\n\",sep=\"\")\n    cross_valid[i,j][[1]] <- crossValidation(testFunc, 2500, 10,\n                                             train_in,\n                                             train_out,\n                                             alpha=alphaVec[i],\n                                             diffuse=diffuseVec[j])\n\n    accMat[i,j] <- cross_valid[i,j][[1]][[2]]\n\n    cat(round(k/(la*ld)*100,1),\"% Finished\",\"\\n\\n\",sep=\"\")\n    k <- k+1\n  }\n}\n## To access the data list you want, call cross_valid[i,j][[1]]\n## Ex: to get alpha=0.001, diffuse=1 call cross_valid[2,3][[1]]\n## I only got the summary results from crossValidation(), so to\n## access the confusion matrix call cross_valid[2,3][[1]][[1]]\n## and for the accuracy cross_valid[2,3][[1]][[2]]\n\n## Let's plot the accuracies from different values of alpha for each value\n## of diffuse\naccMat <- matrix(0,nrow=la,ncol=ld)\nfor(i in 1:la){\n  for(j in 1:ld){\n    accMat[i,j] <- cross_valid[i,j][[1]][[2]]\n  }\n}\n\n## Plot the summary 1-accuracies (error)\n## for the alphas for each value of diffuse\nmatplot(alphaVec,1-accMat,xlab=\"alpha\",ylab=\"error\",\n        type=\"b\",pch=16,col=1:ld, lty=1, lwd=2)\nlegend(\"top\",title=\"diffuse\",legend=diffuseVec,pch=16,col=1:ld)\n\n## Let's get rid of the alpha=0 points to get a better look\nmatplot(alphaVec[-1],1-accMat[-1,],xlab=\"alpha\",ylab=\"error\",\n        type=\"b\",pch=16,col=1:ld, lty=1, lwd=2)\nlegend(\"top\",title=\"diffuse\",legend=diffuseVec,pch=16,col=1:ld)\n\n\n## Use the data to train the Naive Bayes Classifier\n## with the optimal settings. (I've restricted the\n## size of the data set so that it runs quickly for\n## the example.)\nNBParameters <- bayesProb(train_out[1:5000],train_in[1:5000],\n                          alpha=0.01,diffuse=1)\n\n## Read, clean, and format the test data\ntest_in <- cleanInData(\"test_in.csv\")\n\n## Use the classifier to predict the categories for the test data.\n## (I've restricted the size of the data set so that it runs quickly\n## for the example.)\ntest_pred <- bayesClassify(test_in[1:5000], NBClassifier)\n\n## Write the predictions to a file\nwriteResults(test_pred,\"test_out.csv\")\n\n## If you feel comfortable with the code, you can use the functions\n## freely by typing them in the console or creating a new script file\n## in the \"AbstractPackage\" folder. You can also edit or write code in\n## this file, if you'd like. If you want to run the full model,\n## remove the code that says [1:5000] on the last few lines and\n## prepare to wait (~20min). Best!\n",
    "created" : 1476469890760.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2865832012",
    "id" : "838A1C82",
    "lastKnownWriteTime" : 1476498916,
    "last_content_update" : 1476498916078,
    "path" : "C:/Users/Renzo/Desktop/GradSchool/Comp551/Abstract Project/AbstractPackage/SourceMe.R",
    "project_path" : "SourceMe.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}