{
    "collab_server" : "",
    "contents" : "#' Vectorize a list of text vectors\n#'\n#' Take a list of individual text vectors and use a vector of categories to\n#' get a list of text vectors concatenated by category.\n#'\n#'\n#' @param trainIn A list of character vectors. (Output from cleanData())\n#' @param trainOut A character vector denoting the Category to which each\n#' element of the trainIn list belongs.\n#'\n#' @return A list of length C of character vectors, where C is the number of\n#' unique categories in the trainOut vector.\n#' @export\n#'\n#' @examples\n#' ## The number of texts\n#' length(cleanTrainIn)\n#'\n#' ## The number of categories\n#' length(vectorizeAbstracts(cleanTrainIn,cleanTrainOut))\nvectorizeAbstracts <- function(trainIn, trainOut) {\n  indexMath <- which(trainOut == \"math\")\n  indexComp <- which(trainOut == \"cs\")\n  indexPhys <- which(trainOut == \"physics\")\n  indexStat <- which(trainOut == \"stat\")\n  indexMisc <- which(trainOut == \"category\")\n\n  fullMath <- do.call(\"c\", trainIn[indexMath])\n  fullComp <- do.call(\"c\", trainIn[indexComp])\n  fullPhys <- do.call(\"c\", trainIn[indexPhys])\n  fullStat <- do.call(\"c\", trainIn[indexStat])\n  fullMisc <- do.call(\"c\", trainIn[indexMisc])\n\n  return(\n    list(\n      \"Math\" = fullMath,\n      \"Comp\" = fullComp,\n      \"Phys\" = fullPhys,\n      \"Stat\" = fullStat,\n      \"Misc\" = fullMisc\n    )\n  )\n}\n\n#' Provides the indices for the training and validation sets for k-fold\n#' cross-validation.\n#'\n#' @param N The size of the total sample.\n#' @param k The number of folds.\n#'\n#' @return A list of k index-vectors denoting which elements of the data set\n#' is to be used for training.\n#' @export\n#'\n#' @examples\n#' # What\ngetCVIndex <- function(N, k) {\n  cv <- sample(1:N)\n  size <- floor(N / k)\n  remain <- N %% k\n\n  cvList <- list()\n  for (i in 1:k) {\n    if (i <= remain) {\n      cvList[[i]] <- cv[(1:(size + 1)) + ((i - 1) * (size + 1))]\n    } else if (i > remain) {\n      cvList[[i]] <- cv[(1:size) + ((i - 1) * size) + remain]\n    }\n  }\n  return(cvList)\n}\n\n#' Profile a function to determine how much processing time each segment of\n#' code within the function takes.\n#'\n#' @param func A function to be profiled\n#' @param ... The necessary arguments to be passed to the function\n#'\n#' @return A list of two elements. The first element contains the output\n#' of func. The second element is the profile of func.\n#' @export\n#'\n#' @examples\n#' #profileFunc(runAll())\nprofileFunc <- function(func, ...) {\n  Rprof()\n  output <- func(...)\n  Rprof(NULL)\n  profileResults <- summaryRprof()\n  return(list(output, profileResults))\n}\n",
    "created" : 1476382989603.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1719801878",
    "id" : "E74F1DB0",
    "lastKnownWriteTime" : 1476496746,
    "last_content_update" : 1476496746698,
    "path" : "C:/Users/Renzo/Desktop/GradSchool/Comp551/Abstract Project/AbstractPackage/R/helpers.R",
    "project_path" : "R/helpers.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}