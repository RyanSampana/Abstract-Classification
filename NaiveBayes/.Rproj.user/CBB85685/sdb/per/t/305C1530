{
    "collab_server" : "",
    "contents" : "#' Read, clean, and format text data\n#'\n#' Read, clean, and format text data from a .csv file. The function treats\n#' each row of the .csv file as a single string. The function splits each\n#' string into a vector of \"words.\" A \"word\" is any consecutive series of\n#' alphabetic characters. All spaces and non-alphabetic characters are\n#' treated as word-separators and are removed. All \"words\" are coerced to\n#' lower case.\n#'\n#' @param fileName A string of the name of the .csv file to be read. If the\n#' file is not in the working directory, the full path name must be specified.\n#' The \"id\" column is discarded when the .csv file is read, so the input text\n#' .csv file and the category .csv file must be matched by row beforehand.\n#'\n#' @return A list of character vectors. All vector entries are strings of only\n#'  lowercase , alphabetic characters.\n#'\n#' @export\n#'\n#' @examples\n#' #cleanTrainIn <- cleanData(\"train_in.csv\")\n#'\ncleanInData <- function(filename) {\n  rawData <- read.csv(file = filename, stringsAsFactors = FALSE)\n  cleanAbs <- gsub(\"[^[:alpha:]]\", \" \", rawData$abstract)\n  cleanAbs <- gsub(\"\\\\s+\", \" \", cleanAbs)\n  cleanAbs <- tolower(cleanAbs)\n  splitAbs <- lapply(cleanAbs, strsplit, split = \" \")\n  splitAbs <- lapply(splitAbs, unlist, recursive = FALSE)\n\n  return(splitAbs)\n}\n\n#' Read and format the known categories for text data from a .csv file\n#'\n#' @param filename A string of the name of the .csv file to be read. If the\n#' file is not in the working directory, the full path name must be specified.\n#' The \"id\" column is discarded when the .csv file is read, so the input text\n#' .csv file and the category .csv file must be matched by row beforehand.\n#'\n#' @return A factor vector of category names. The  vector must be in the\n#' same order as the The factor has levels c(\"math\",\"cs\",\"physics\",\"stat\",\n#' \"category\") which correspond to numeric values c(1,2,3,4,5) (if coerced).\n#'\n#' @export\n#'\n#' @examples\n#' # Blarge\ncleanOutData <- function(filename){\n  rawData <- read.csv(file = filename, stringsAsFactors = FALSE)\n  cleanCat <- rawData[,2]\n  cleanCat <- factor(cleanCat, levels=c(\"math\",\"cs\",\"physics\",\"stat\",\"category\"))\n  return(cleanCat)\n}\n\n#' Writes the results of the predictions in the specified format.\n#'\n#' @param output The pediction from bayesClassify()\n#' @param filename The name of the .csv file to which to write the prediction\n#'\n#' @return NULL\n#' @export\n#'\n#' @examples\n#' # Meh\nwriteResults <- function(output,filename = \"test_out.csv\"){\n  testRes <- as.character(output)\n  results <- data.frame(id=(0:(length(testRes)-1)),category=testRes)\n  write.csv(results,file=filename,quote=FALSE,row.names=FALSE)\n  return(NULL)\n}\n",
    "created" : 1476382866902.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1841218388",
    "id" : "305C1530",
    "lastKnownWriteTime" : 1476497020,
    "last_content_update" : 1476497020250,
    "path" : "C:/Users/Renzo/Desktop/GradSchool/Comp551/Abstract Project/AbstractPackage/R/cleanData.R",
    "project_path" : "R/cleanData.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}