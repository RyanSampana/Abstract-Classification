cross_valid[[1]] <- list("smile",c(1,2,3),"please")
cross_valid
cross_valid[1,1]
str(cross_valid[1,1])
str(cross_valid[1,1][[1]])
cross_valid[1,1][[1]] <- list("smile",c(1,2,3),"please")
cross_valid
cross_valid[[1]]
cross_valid[1,1]
temp <- cross_valid[1,1]
temp <- cross_valid[1,1][[1]]
alphaVec <- c(0,0.001,0.5,1,5)
diffuseVec <- c(0,0.5,1)
la <- length(alphaVec)
ld <- length(diffuseVec)
cross_valid <- matrix(rep(list(),la*ld),nrow=la,ncol=ld)
## The
for(i in 1:la){
for(j in 1:ld){
cross_valid[i,j][[1]] <- crossValidation(testFunc, 1000, 5,
train_in,
train_out,
alpha=alphaVec[i],
diffuse=diffuseVec[j])
}
}
?cat
alphaVec <- c(0,0.001,0.5,1,5)
diffuseVec <- c(0,0.5,1)
la <- length(alphaVec)
ld <- length(diffuseVec)
cross_valid <- matrix(rep(list(),la*ld),nrow=la,ncol=ld)
## The
k <- 1
for(i in 1:la){
for(j in 1:ld){
cat("alpha = ",alphaVec[i],"  diffuse = ",diffuseVec[j],sep="")
cross_valid[i,j][[1]] <- crossValidation(testFunc, 1000, 5,
train_in,
train_out,
alpha=alphaVec[i],
diffuse=diffuseVec[j])
cat(k/(la*ld)*100,"% Finished","\n",sep="")
}
}
source('C:/Users/Renzo/Desktop/GradSchool/Comp551/Abstract Project/AbstractPackage/SourceMe.R')
alphaVec <- c(0,0.001,0.5,1,5)
diffuseVec <- c(0,0.5,1)
la <- length(alphaVec)
ld <- length(diffuseVec)
cross_valid <- matrix(rep(list(),la*ld),nrow=la,ncol=ld)
## The
k <- 1
for(i in 1:la){
for(j in 1:ld){
cat("alpha = ",alphaVec[i],"  diffuse = ",diffuseVec[j],"\n",sep="")
cross_valid[i,j][[1]] <- crossValidation(testFunc, 1000, 5,
train_in,
train_out,
alpha=alphaVec[i],
diffuse=diffuseVec[j])
cat(k/(la*ld)*100,"% Finished","\n",sep="")
}
}
cat(round(k/(la*ld)*100,1),"% Finished","\n\n","2",sep="")
k <- 1
for(i in 1:la){
for(j in 1:ld){
cat("alpha = ",alphaVec[i],"  diffuse = ",diffuseVec[j],"\n",sep="")
cross_valid[i,j][[1]] <- crossValidation(testFunc, 1000, 5,
train_in,
train_out,
alpha=alphaVec[i],
diffuse=diffuseVec[j])
cat(round(k/(la*ld)*100,1),"% Finished","\n\n",sep="")
}
}
k <- 1
for(i in 1:la){
for(j in 1:ld){
cat("alpha = ",alphaVec[i],"  diffuse = ",diffuseVec[j],"\n",sep="")
cross_valid[i,j][[1]] <- crossValidation(testFunc, 1000, 5,
train_in,
train_out,
alpha=alphaVec[i],
diffuse=diffuseVec[j])
cat(round(k/(la*ld)*100,1),"% Finished","\n\n",sep="")
k <- k+1
}
}
cross_valid[1,1]
cross_valid[1,1][[1]]
cross_valid[1,1][[1]][[2]]
str(cross_valid[[1]])
cross_valid[1,1][[1]][[2]]
cross_valid[1,1][[1]][[2]][[1]]
cross_valid[1,1][[1]][[2]][[2]]
cross_valid
str(cross_valid[1,1])
temp <- cross_valid
cross_valid[[1]]
for(i in 1:la{for(j in 1:ld){temp[i,j] <- temp[i,j][[1]]}}
for(i in 1:la){for(j in 1:ld){temp[i,j] <- temp[i,j][[1]]}}
cross_valid[1,1] <- list("smile",c(1,2,3),"please")
cross_valid
plot(alphaVec,cross_valid[,1][[1]][[2]][[2]])
cross_valid[,1][[1]][[2]][[2]]
cross_valid[,1]
cross_valid[,1][[1]]
cross_valid[,1][[1]][[2]]
cross_valid[,1][[1]][[1]]
cross_valid[,1][[1]][[2]]
cross_valid[,2][[1]][[2]]
cross_valid[,3][[1]][[2]]
cross_valid[,4][[1]][[2]]
cross_valid[1,][[1]][[2]]
cross_valid[2,][[1]][[2]]
cross_valid[3,][[1]][[2]]
cross_valid[4,][[1]][[2]]
cross_valid[4,4][[1]][[2]]
cross_valid[1,1][[1]][[2]]
cross_valid[1,][[1]][[2]]
cross_valid[,1][[1]][[2]]
cross_valid[1:4,1][[1]][[2]]
temp <- cross_valid[1:4,1]
temp <- cross_valid[1:4,1][[1]]
temp <- cross_valid[1:4,1][[2]]
temp <- cross_valid[1:4,1][[1]]
temp <- cross_valid[1:4,1][[2]]
temp <- cross_valid[1:4,1][[1]]
temp <- cross_valid[1:4,1][[2]]
temp <- cross_valid[1:4,1][[1]]
temp <- cross_valid[1:4,1][[2]]
temp <- cross_valid[1:4,1][[3]]
temp <- cross_valid[1:4,1][[4]]
temp <- cross_valid[1:4,1][[5]]
temp <- cross_valid[1:4,1][[4]]
temp <- cross_valid[1,1][[4]]
temp <- cross_valid[1,1][[1]]
temp <- cross_valid[1,1]
temp <- cross_valid[1,1][[2]]
temp <- cross_valid[1,1][[1]]
temp <- cross_valid[2,1][[1]]
temp <- cross_valid[2,1][[2]]
temp <- cross_valid[2,2][[1]]
temp <- cross_valid[2,2][[2]]
temp <- cross_valid[2,2][[1]]
str(cross_valid[1:2,1])
str(cross_valid[1:2,1][[1]])
str(cross_valid[1:2,1][[1]][[2]])
str(cross_valid[1:2,1][[1]][[1]])
str(cross_valid[1:2,1][[1]][[1:2]])
str(cross_valid[1:2,1][[1]][[1]])
str(cross_valid[1:2,1][[1]][[2]])
str(cross_valid[1:2,1][[1]][[3]])
str(cross_valid[1:2,1][[2]][[1]])
str(cross_valid[1:2,1][[2]][[2]])
str(cross_valid[2:3,1][[2]][[2]])
str(cross_valid[2:3,1][[1]][[2]])
str(cross_valid[2:3,1][[2]][[1]])
str(cross_valid[2:3,1][[1:2]][[2]])
str(cross_valid[2:3,1][1:2][[2]])
str(cross_valid[2:3,1][1:3][[2]])
?sapply
roxygenize()
roxygenize()
library(AbstractPackage)
testCross <- crossValidation(testFunc, 1000, 5, train_in, train_out)
testCross
testCross[[1]]
testCross[[2]]
testCross <- crossValidation(testFunc, 1000, 5, train_in, train_out,innerRes=TRUE)
testCross[[1]]
testCross[[2]]
library(AbstractPackage)
testCross <- crossValidation(testFunc, 1000, 5, train_in, train_out,innerRes=TRUE)
testCross[[1]]
testCross[[2]]
mean(testCross[[2]][[2]])
testCross[[1]][[2]]
cross_valid <- matrix(rep(list(),la*ld),nrow=la,ncol=ld)
## The
k <- 1
for(i in 1:la){
for(j in 1:ld){
cat("alpha = ",alphaVec[i],"  diffuse = ",diffuseVec[j],"\n",sep="")
cross_valid[i,j][[1]] <- crossValidation(testFunc, 1000, 5,
train_in,
train_out,
alpha=alphaVec[i],
diffuse=diffuseVec[j])
cat(round(k/(la*ld)*100,1),"% Finished","\n\n",sep="")
k <- k+1
}
}
cross_valid[1,1][[1]]
cross_valid[1,1][[1]][[1]]
cross_valid[1,1][[1]][[2]]
cross_valid[,1][[1]]
cross_valid[,1]
cross_valid[,1][[1:5]]
cross_valid[,1][[1:3]]
cross_valid[,1][[1:1]]
cross_valid[,1][[1:2]]
cross_valid[,1][[1,2]]
cross_valid[,1][[c(1,2)]]
cross_valid[,1][[c(2,1)]]
cross_valid[,1][[c(3,1)]]
cross_valid[,1][[c(3,2)]]
unlist(cross_valid[,1])
unlist(cross_valid[,1][[1]])
unlist(cross_valid[,1][[2]])
unlist(cross_valid[,1][[3]])
unlist(cross_valid[,1][[4]])
cross_valid[,1]
cross_valid[,1][[5]]
cross_valid[,1][[4]]
cross_valid[,1][[3]]
cross_valid[,1][[2]]
cross_valid[,1][[1]]
cross_valid[1,1]
cross_valid[1,2]
cross_valid[1,3]
cross_valid[1,1]
cross_valid[2,1]
cross_valid[3,1]
cross_valid[4,1]
accMat <- matrix(0,nrow=la,ncol=ld)
for(i in 1:la){
for(i in 1:ld){
accMat[i,j] <- cross_valid[i,j][[1]][[2]]
}
}
accMat
cross_valid
cross_valid[1,2]
cross_valid[1,2][[1]]
cross_valid[1,2][[1]][[2]]
cross_valid[1,1][[1]][[2]]
cross_valid[1,3][[1]][[2]]
cross_valid[2,3][[1]][[2]]
cross_valid[3,3][[1]][[2]]
accMat <- matrix(0,nrow=la,ncol=ld)
for(i in 1:la){
for(j in 1:ld){
accMat[i,j] <- cross_valid[i,j][[1]][[2]]
}
}
accMath
accMat
matplot(accMat,col=1:3)
matplot(accMat,pch=1,col=1:3)
matplot(accMat,pch=2,col=1:3)
matplot(accMat,pch=3,col=1:3)
matplot(accMat,pch=4,col=1:3)
matplot(accMat,pch=5,col=1:3)
matplot(accMat,pch=6,col=1:3)
matplot(accMat,pch=10,col=1:3)
matplot(accMat,pch=12,col=1:3)
matplot(accMat,pch=15,col=1:3)
matplot(accMat,pch=13,col=1:3)
matplot(accMat,pch=14,col=1:3)
matplot(accMat,pch=15,col=1:3)
matplot(accMat,pch=16,col=1:3)
matplot(accMat,type="l",pch=16,col=1:3)
matplot(accMat,type="c",pch=16,col=1:3)
matplot(accMat,type="b",pch=16,col=1:3)
matplot(accMat,type="n",pch=16,col=1:3)
?plot
matplot(t(accMat),type="n",pch=16,col=1:4)
matplot(t(accMat),type="b",pch=16,col=1:4)
matplot(t(accMat),type="b",pch=16,col=1:5)
?legend
matplot(accMat,type="b",pch=16,col=1:3)
legend("topleft",legend=diffuseVec,pch=16,col=1:3)
matplot(accMat,type="b",pch=16,col=1:3,xlab="alpha",ylab="accuracy")
legend("topleft",title="diffuse",legend=diffuseVec,pch=16,col=1:3)
legend("topleft",title="diffuse",legend=round(diffuseVec,1),pch=16,col=1:3)
matplot(accMat,type="b",pch=16,col=1:3,xlab="alpha",ylab="accuracy")
legend("topleft",title="diffuse",legend=round(diffuseVec,1),pch=16,col=1:3)
matplot(accMat,type="b",pch=16,col=1:3,xlab="alpha",ylab="accuracy")
legend("topleft",title="diffuse",legend=round(diffuseVec,2),pch=16,col=1:3)
legend("topleft",title="diffuse",legend=round(diffuseVec),pch=16,col=1:3)
?matplot
matplot(alphaVec,accMat,type="b",pch=16,col=1:3, xlab="alpha",ylab="accuracy")
legend("topleft",title="diffuse",legend=diffuseVec,pch=16,col=1:3)
matplot(alphaVec,1-accMat,type="b",pch=16,col=1:3, xlab="alpha",ylab="accuracy")
legend("topright",title="diffuse",legend=diffuseVec,pch=16,col=1:3)
?plot
matplot(alphaVec,1-accMat,type="b",pch=16,col=1:3, xlab="alpha",ylab="accuracy")
legend("topright",title="diffuse",legend=diffuseVec,pch=16,col=1:3)
matplot(alphaVec[1:4],1-accMat[1:4,],type="b",pch=16,col=1:ld, xlab="alpha",ylab="accuracy")
legend("topright",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
matplot(alphaVec[2:4],1-accMat[2:4,],type="b",pch=16,col=1:ld, xlab="alpha",ylab="accuracy")
legend("topright",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
matplot(alphaVec[2:4],1-accMat[2:4,],type="l",pch=16,col=1:ld, xlab="alpha",ylab="accuracy")
legend("topright",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
alphaVec[1:5]
?legend
?plotmat
?matplot
matplot(alphaVec[2:4],1-accMat[2:4,],type="l",pch=16,col=1:ld, lty=1,
xlab="alpha",ylab="accuracy")
legend("topright",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
matplot(alphaVec[2:4],1-accMat[2:4,],xlab="alpha",ylab="accuracy",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("topright",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
matplot(alphaVec,1-accMat,xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("topright",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
matplot(alphaVec[,-1],1-accMat[,-1],xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("topright",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
matplot(alphaVec[-1],1-accMat[,-1],xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("topright",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
matplot(alphaVec[-1],1-accMat[-1,],xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("topright",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
matplot(alphaVec[-1],1-accMat[-1,],xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("bottomright",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
matplot(alphaVec[-c(1,5)],1-accMat[-c(1,5),],xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("bottomright",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
legend("center",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
legend("topcenter",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
legend("top",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
alphaVec <- c(0,0.001,0.01,0.5,0.7,1)
diffuseVec <- c(0,0.5,1)
la <- length(alphaVec)
ld <- length(diffuseVec)
cross_valid <- matrix(rep(list(),la*ld),nrow=la,ncol=ld)
## We're planning to make a plot of the accuracies for these values later,
## so let's store the accuracies in a matrix as we get them.
accMat <- matrix(0,nrow=la,ncol=ld)
k <- 1
for(i in 1:la){
for(j in 1:ld){
cat("alpha = ",alphaVec[i],"  diffuse = ",diffuseVec[j],"\n",sep="")
cross_valid[i,j][[1]] <- crossValidation(testFunc, 1000, 5,
train_in,
train_out,
alpha=alphaVec[i],
diffuse=diffuseVec[j])
accMat[i,j] <- cross_valid[i,j][[1]][[2]]
cat(round(k/(la*ld)*100,1),"% Finished","\n\n",sep="")
k <- k+1
}
}
accMat <- matrix(0,nrow=la,ncol=ld)
for(i in 1:la){
for(j in 1:ld){
accMat[i,j] <- cross_valid[i,j][[1]][[2]]
}
}
matplot(alphaVec,1-accMat,xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("topright",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
matplot(alphaVec[-c(1,5)],1-accMat[-c(1,5),],xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("top",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
## Let's get rid of the alpha=0 points to get a better look
matplot(alphaVec[-1],1-accMat[-1,],xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("top",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
temp1 <- crossValidation(testFunc,1000,5,train_in,train_out,alpha=0.1,diffuse=0)
temp1 <- crossValidation(testFunc,1000,5,train_in,train_out,alpha=0.1,diffuse=0.5)
temp1 <- crossValidation(testFunc,1000,5,train_in,train_out,alpha=0.1,diffuse=1)
temp2 <- crossValidation(testFunc,1000,5,train_in,train_out,alpha=0.1,diffuse=0.5)
temp3 <- crossValidation(testFunc,1000,5,train_in,train_out,alpha=0.1,diffuse=0)
temp1[[2]]
temp1[[3]]
temp2
temp1
temp3
accMat[,2] <- c(temp3[[2]],temp2[[2]],temp1[[2]])
matplot(alphaVec[-1],1-accMat[-1,],xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("top",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
alphaVec[2] <- 0.1
matplot(alphaVec[-1],1-accMat[-1,],xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("top",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
alphaVec[2] <- 0.001
alphaVec[3] <- 0.1
matplot(alphaVec[-1],1-accMat[-1,],xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("top",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
## to test different values of alpha and diffuse
alphaVec <- c(0.001,0.1,0.5,0.7,1)
diffuseVec <- c(0,0.5,1)
la <- length(alphaVec)
ld <- length(diffuseVec)
cross_valid <- matrix(rep(list(),la*ld),nrow=la,ncol=ld)
## We're planning to make a plot of the accuracies for these values later,
## so let's store the accuracies in a matrix as we get them.
accMat <- matrix(0,nrow=la,ncol=ld)
k <- 1
for(i in 1:la){
for(j in 1:ld){
cat("alpha = ",alphaVec[i],"  diffuse = ",diffuseVec[j],"\n",sep="")
cross_valid[i,j][[1]] <- crossValidation(testFunc, 1000, 5,
train_in,
train_out,
alpha=alphaVec[i],
diffuse=diffuseVec[j])
accMat[i,j] <- cross_valid[i,j][[1]][[2]]
cat(round(k/(la*ld)*100,1),"% Finished","\n\n",sep="")
k <- k+1
}
}
matplot(alphaVec,1-accMat,xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("center",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
matplot(alphaVec[-1],1-accMat[-1,],xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("top",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
matplot(alphaVec,1-accMat,xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("center",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
alphaVec <- c(0.001,0.1,0.5,0.7,1)
diffuseVec <- c(0,0.5,1)
la <- length(alphaVec)
ld <- length(diffuseVec)
cross_valid <- matrix(rep(list(),la*ld),nrow=la,ncol=ld)
## We're planning to make a plot of the accuracies for these values later,
## so let's store the accuracies in a matrix as we get them.
accMat <- matrix(0,nrow=la,ncol=ld)
k <- 1
for(i in 1:la){
for(j in 1:ld){
cat("alpha = ",alphaVec[i],"  diffuse = ",diffuseVec[j],"\n",sep="")
cross_valid[i,j][[1]] <- crossValidation(testFunc, 2500, 10,
train_in,
train_out,
alpha=alphaVec[i],
diffuse=diffuseVec[j])
accMat[i,j] <- cross_valid[i,j][[1]][[2]]
cat(round(k/(la*ld)*100,1),"% Finished","\n\n",sep="")
k <- k+1
}
}
matplot(alphaVec,1-accMat,xlab="alpha",ylab="error",
type="b",pch=16,col=1:ld, lty=1, lwd=2)
legend("center",title="diffuse",legend=diffuseVec,pch=16,col=1:ld)
alphaVec <- c(0.001,0.1,0.5,0.7,1)
diffuseVec <- c(0,0.5,1)
la <- length(alphaVec)
ld <- length(diffuseVec)
cross_valid <- matrix(rep(list(),la*ld),nrow=la,ncol=ld)
## We're planning to make a plot of the accuracies for these values later,
## so let's store the accuracies in a matrix as we get them.
accMat <- matrix(0,nrow=la,ncol=ld)
k <- 1
for(i in 1:la){
for(j in 1:ld){
cat("alpha = ",alphaVec[i],"  diffuse = ",diffuseVec[j],"\n",sep="")
cross_valid[i,j][[1]] <- crossValidation(testFunc, 2500, 10,
train_in,
train_out,
alpha=alphaVec[i],
diffuse=diffuseVec[j])
accMat[i,j] <- cross_valid[i,j][[1]][[2]]
cat(round(k/(la*ld)*100,1),"% Finished","\n\n",sep="")
k <- k+1
}
}
temp
roxygenise()
library(AbstractPackage)
library(AbstractPackage)
library(AbstractPackage)
install.packages("AbstractPackage")
install.packages("AbstractPackage")
library(roxygen2)
roxygenize()
?bayesProb
library(AbstractPackage)
?bayesProb
roxygenize()
?bayesProb
train_in <- cleanInData("train_in.csv")
train_out <- cleanOutData("train_out.csv")
## Perform cross validation (for time, on a small subset of the data)
## to test different values of alpha and diffuse
alphaVec <- c(0,0.001,0.1,0.5,0.7,1)
diffuseVec <- c(0,0.5,1)
la <- length(alphaVec)
ld <- length(diffuseVec)
cross_valid <- matrix(rep(list(),la*ld),nrow=la,ncol=ld)
## We're planning to make a plot of the accuracies for these values later,
## so let's store the accuracies in a matrix as we get them.
accMat <- matrix(0,nrow=la,ncol=ld)
k <- 1
for(i in 1:la){
for(j in 1:ld){
cat("alpha = ",alphaVec[i],"  diffuse = ",diffuseVec[j],"\n",sep="")
cross_valid[i,j][[1]] <- crossValidation(testFunc, 8000, 10,
train_in,
train_out,
alpha=alphaVec[i],
diffuse=diffuseVec[j])
accMat[i,j] <- cross_valid[i,j][[1]][[2]]
cat(round(k/(la*ld)*100,1),"% Finished","\n\n",sep="")
k <- k+1
}
}
library(AbstractPackage)
library(roxygen2)
roxygenize()
library(AbstractPackage)
